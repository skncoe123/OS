#include <stdio.h>
#include <stdlib.h>

struct process {
    int max[6], all[6], need[6], finished;
} p[10];

int avail[6], sseq[10], ss = 0, n, nor;

int safeseq();

int main() {
    int ch, i, j, k;

    do {
        printf("\n\n\t 1. Input");
        printf("\n\n\t 2. Check Safe State");
        printf("\n\n\t 3. Print");
        printf("\n\n\t 4. Exit");
        printf("\n\n\t Enter your choice: ");
        scanf("%d", &ch);

        switch (ch) {
            case 1:
                printf("\n\n\t Enter number of processes: ");
                scanf("%d", &n);
                
                printf("\n\n\t Enter the number of resource types: ");
                scanf("%d", &nor);
                
                printf("\n\n\t Enter the available resources:\n");
                
                for (j = 0; j < nor; j++) {
                    printf("\n\n\t For Resource type %d: ", j);
                    scanf("%d", &avail[j]);
                }
                
                for (i = 0; i < n; i++) {
                    printf("\n\n\t Enter Max and Allocated resources for P%d:\n", i);
                    for (j = 0; j < nor; j++) {
                        printf("\n\n\t Enter the Max of resource %d: ", j);
                        scanf("%d", &p[i].max[j]);
                        
                        printf("\n\n\t Allocation of resource %d: ", j);
                        scanf("%d", &p[i].all[j]);
                        
                        if (p[i].all[j] > p[i].max[j]) {
                            printf("\n\n\t Allocation should be less than or equal to Max");
                            j--; 
                        }
                        p[i].need[j] = p[i].max[j] - p[i].all[j];
                    }
                }
                break;
                
            case 2:
                if (safeseq() == 1)
                    printf("\n\n\t The system is in a safe state.");
                else
                    printf("\n\n\t The system is NOT in a safe state.");
                break;
                
            case 3:
                printf("\n\n\t Number of processes: %d", n);
                printf("\n\n\t Number of Resources: %d", nor);
                printf("\n\n\t Pid\t Max\t Allocated\t Need");
                for (i = 0; i < n; i++) {
                    printf("\n\n\t P%d: ", i);
                    for (j = 0; j < nor; j++)
                        printf(" %d ", p[i].max[j]);
                    printf("\t");
                    for (j = 0; j < nor; j++)
                        printf(" %d ", p[i].all[j]);
                    printf("\t");
                    for (j = 0; j < nor; j++)
                        printf(" %d ", p[i].need[j]);
                }
                printf("\n\n\t Available: ");
                for (i = 0; i < nor; i++)
                    printf(" %d ", avail[i]);
                break;
                
            case 4: 
                exit(0);
        }
        
        getchar(); 
        printf("Press Enter to continue...");
        getchar(); 
    } while (ch != 4);

    return 0;
}

int safeseq() {
    int i, j, k, work[6], finished[10] = {0}, safeSeq[10], index = 0;

    
    for (j = 0; j < nor; j++)
        work[j] = avail[j];

    
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            if (!finished[j]) { 
                int canAllocate = 1;
               
                for (k = 0; k < nor; k++) {
                    if (p[j].need[k] > work[k]) {
                        canAllocate = 0;
                        break;
                    }
                }
                if (canAllocate) { 
                    for (k = 0; k < nor; k++) {
                        work[k] += p[j].all[k]; 
                    }
                    safeSeq[index++] = j; 
                    finished[j] = 1; 
                }
            }
        }
    }

    
    for (i = 0; i < n; i++) {
        if (!finished[i]) {
            printf("\n\n\t The system is NOT in a safe state.");
            return 0; 
        }
    }

    printf("\n\n\t The system is in a safe state.");
    printf("\n\n\t Safe sequence is: ");
    for (i = 0; i < index; i++)
        printf("P%d ", safeSeq[i]);
    return 1; 
}


